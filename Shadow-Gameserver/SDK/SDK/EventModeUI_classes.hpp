#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EventModeUI

#include "Basic.hpp"

#include "FortniteUI_classes.hpp"


namespace SDK
{

// Class EventModeUI.FocusButton
// 0x0010 (0x0590 - 0x0580)
class UFocusButton final : public UBacchusActionButton
{
public:
	class UPaperSprite*                           StartFocusingSprite;                               // 0x0580(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperSprite*                           StopFocusingSprite;                                // 0x0588(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleCanUseEventModeFocusChanged(bool bCanUseEventModeFocus);
	void HandleEventModeFocusingChanged(bool bIsEventModeFocusing);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FocusButton">();
	}
	static class UFocusButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFocusButton>();
	}
};
static_assert(alignof(UFocusButton) == 0x000008, "Wrong alignment on UFocusButton");
static_assert(sizeof(UFocusButton) == 0x000590, "Wrong size on UFocusButton");
static_assert(offsetof(UFocusButton, StartFocusingSprite) == 0x000580, "Member 'UFocusButton::StartFocusingSprite' has a wrong offset!");
static_assert(offsetof(UFocusButton, StopFocusingSprite) == 0x000588, "Member 'UFocusButton::StopFocusingSprite' has a wrong offset!");

// Class EventModeUI.FortEventModeEmotesWidget
// 0x00B0 (0x0348 - 0x0298)
class UFortEventModeEmotesWidget final : public UFortHUDElementWidget
{
public:
	TSoftObjectPtr<class UFortMontageItemDefinitionBase> Emote1;                                            // 0x0298(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UFortMontageItemDefinitionBase> Emote2;                                            // 0x02C0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UFortMontageItemDefinitionBase> Emote3;                                            // 0x02E8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UFortMontageItemDefinitionBase>> RandomEmotes;                                      // 0x0310(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class URichTextBlock*                         Text_Emote1;                                       // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URichTextBlock*                         Text_Emote2;                                       // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URichTextBlock*                         Text_Emote3;                                       // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URichTextBlock*                         Text_EmoteRandom;                                  // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnFocusAvailableChanged(bool bIsFocusAvailable);
	void OnFocusStateChanged(bool bIsFocusing);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventModeEmotesWidget">();
	}
	static class UFortEventModeEmotesWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventModeEmotesWidget>();
	}
};
static_assert(alignof(UFortEventModeEmotesWidget) == 0x000008, "Wrong alignment on UFortEventModeEmotesWidget");
static_assert(sizeof(UFortEventModeEmotesWidget) == 0x000348, "Wrong size on UFortEventModeEmotesWidget");
static_assert(offsetof(UFortEventModeEmotesWidget, Emote1) == 0x000298, "Member 'UFortEventModeEmotesWidget::Emote1' has a wrong offset!");
static_assert(offsetof(UFortEventModeEmotesWidget, Emote2) == 0x0002C0, "Member 'UFortEventModeEmotesWidget::Emote2' has a wrong offset!");
static_assert(offsetof(UFortEventModeEmotesWidget, Emote3) == 0x0002E8, "Member 'UFortEventModeEmotesWidget::Emote3' has a wrong offset!");
static_assert(offsetof(UFortEventModeEmotesWidget, RandomEmotes) == 0x000310, "Member 'UFortEventModeEmotesWidget::RandomEmotes' has a wrong offset!");
static_assert(offsetof(UFortEventModeEmotesWidget, Text_Emote1) == 0x000328, "Member 'UFortEventModeEmotesWidget::Text_Emote1' has a wrong offset!");
static_assert(offsetof(UFortEventModeEmotesWidget, Text_Emote2) == 0x000330, "Member 'UFortEventModeEmotesWidget::Text_Emote2' has a wrong offset!");
static_assert(offsetof(UFortEventModeEmotesWidget, Text_Emote3) == 0x000338, "Member 'UFortEventModeEmotesWidget::Text_Emote3' has a wrong offset!");
static_assert(offsetof(UFortEventModeEmotesWidget, Text_EmoteRandom) == 0x000340, "Member 'UFortEventModeEmotesWidget::Text_EmoteRandom' has a wrong offset!");

}

