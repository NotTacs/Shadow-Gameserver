#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_HidingProp

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_HidingProp.B_HidingProp_C
// 0x02A8 (0x0E40 - 0x0B98)
class AB_HidingProp_C final : public ABuildingProp
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B98(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        ProjectileLocation_ForwardVector;                  // 0x0BA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LandedOnCollisionMesh;                             // 0x0BA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0BB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HideLocation_ForwardVector;                        // 0x0BB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         FadeToBlackTimeLine_NewTrack_0_6F7A5A024A1EA98FBD5F659709389C7D; // 0x0BC0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FadeToBlackTimeLine__Direction_6F7A5A024A1EA98FBD5F659709389C7D; // 0x0BC4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC5[0x3];                                      // 0x0BC5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FadeToBlackTimeLine;                               // 0x0BC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Enabled;                                           // 0x0BD0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HidingEnabled;                                     // 0x0BF0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         PlayerLimit;                                       // 0x0C10(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         TeleportEnabled;                                   // 0x0C30(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         CanTeleport;                                       // 0x0C50(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AFortPawn*>                      HidingPlayers;                                     // 0x0C70(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify)
	struct FGameplayTag                           EnterGameplayCue;                                  // 0x0C80(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ExitGameplayCue;                                   // 0x0C88(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           LandedOnGameplayCue;                               // 0x0C90(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0C98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           RustleGameplayCue;                                 // 0x0CA0(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ExitGameplayCue_Player;                            // 0x0CA8(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           WhileEnteringGameplayCue;                          // 0x0CB0(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	float                                         ObstructionTraceLength;                            // 0x0CB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CBC[0x4];                                      // 0x0CBC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      DestroyObjectTypes;                                // 0x0CC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class AFortPawn*>                      Array;                                             // 0x0CD0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         Int;                                               // 0x0CE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DeimosPropSpawnerOffset;                           // 0x0CE4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FixedEntranceDirection;                            // 0x0CF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CF1[0x3];                                      // 0x0CF1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxInteractAngle;                                  // 0x0CF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WobbleLocationOffset;                              // 0x0CF8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InteractBelowPropDistance;                         // 0x0D04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class AFortPawn*, float>                 HiddenPlayersAndEnterTimes;                        // 0x0D08(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	class AFortPawn*                              LastPawnToInteract;                                // 0x0D58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_HidingProp_C*                        TargetTeleporter;                                  // 0x0D60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TeleporterEnterGameplayCue;                        // 0x0D68(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TeleporterExitGameplayCue;                         // 0x0D70(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           LoopingTeleportingCue;                             // 0x0D78(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Wobble;                                         // 0x0D80(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           WobbleTimerHandle;                                 // 0x0D88(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FGameplayTag>                   BlockEntranceTags;                                 // 0x0D90(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FGameplayTag>                   BlockExitTags;                                     // 0x0DA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UAnimMontage*                           EnterAnimMontage;                                  // 0x0DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ExitAnimMontage;                                   // 0x0DB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPawn*                              LastPawnToHide;                                    // 0x0DC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TeleportingStateGC;                                // 0x0DC8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomWobbleNormal;                                // 0x0DD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SingleOccupant;                                    // 0x0DD1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Teleporting;                                       // 0x0DD2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          JumpOut;                                           // 0x0DD3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DestroyInNonSpyLTM;                                // 0x0DD4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ActiveInSpyLTM;                                    // 0x0DD5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DD6[0x2];                                      // 0x0DD6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   ForceAllowInteractTags;                            // 0x0DD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FGameplayTag                           IsTeleporter;                                      // 0x0DE8(0x0008)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ContainsPlayerRepNof;                              // 0x0DF0(0x0008)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ObstructionTraceExtents;                           // 0x0DF8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ObstructionTraceStartOffSet;                       // 0x0E04(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExitLaunchVelocity;                                // 0x0E10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AdditionalZLaunch;                                 // 0x0E14(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FixedEntraceObstructionTraceEndOffset;             // 0x0E20(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E2C[0x4];                                      // 0x0E2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPawn*>                      NonCosmeticPawns;                                  // 0x0E30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void ExecuteUbergraph_B_HidingProp(int32 EntryPoint);
	void ExecuteGameplayCue(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& CueParameters);
	void RemoveGameplayCue(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& CueParameters);
	void AddGameplayCue(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& CueParameters);
	void TurnClientCameraCollisionOn();
	void StartHiding(class AFortPawn* InteractingPawn);
	void ToggleCameraCollisionForClients();
	void IgnorePawnCollision(class AFortPawn* Target, const float InIgnoreDuration);
	void Teleport(class AActor* Pawn);
	void ReceiveBeginPlay();
	void FadeToBlack(class APawn* Target);
	void StopHiding(const class AFortPawn* Pawn);
	void Pawn_Died(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void WatchForPlayerDeath(class AFortPawn* FortPawn);
	void EndHidingAnalyticSession(class AFortPawn* FortPawn, EEnvironmentalItemEndReason EndReason);
	void InteractEnter();
	void HidingPlayerCountChanged();
	void StopHidingLoop();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void LaunchPlayersOffTop(class AFortPlayerPawn* PlayerPawn);
	void LandedOnHayStack(class AFortPlayerPawn* PlayerPawn, float Z_Velocity_Mag);
	void BndEvt__S_Athena_Launchpad_Collision_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void BlueprintOnInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted);
	void OnReady_64CBF02E419FF250B433D5B2A6E5D744(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void FadeToBlackTimeLine__UpdateFunc();
	void FadeToBlackTimeLine__FinishedFunc();
	void OnRep_HidingPlayers();
	void AddHiddenPlayer(class AFortPawn* FortPawn);
	void RemoveHiddenPlayer(class AFortPawn* FortPawn);
	void OnRep_Teleporting();
	void GetOutOfSnowmanIfExists(class AActor* PlayerPawn);
	bool IsInInfiltrationLTM();
	bool CheckCanUsePassage(class UObject* Object);
	void OnRep_IsTeleporter();
	void OnRep_ContainsPlayer();
	void AllowCosmeticsForPawn(class AFortPawn* Pawn, bool* Allow);

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;
	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	bool BlueprintGetInteractionTime(const class AFortPawn* InteractingPawn, float* OutInteractionTime, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	class FText BlueprintGetFailedInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_HidingProp_C">();
	}
	static class AB_HidingProp_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_HidingProp_C>();
	}
};
static_assert(alignof(AB_HidingProp_C) == 0x000008, "Wrong alignment on AB_HidingProp_C");
static_assert(sizeof(AB_HidingProp_C) == 0x000E40, "Wrong size on AB_HidingProp_C");
static_assert(offsetof(AB_HidingProp_C, UberGraphFrame) == 0x000B98, "Member 'AB_HidingProp_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ProjectileLocation_ForwardVector) == 0x000BA0, "Member 'AB_HidingProp_C::ProjectileLocation_ForwardVector' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, LandedOnCollisionMesh) == 0x000BA8, "Member 'AB_HidingProp_C::LandedOnCollisionMesh' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Sphere) == 0x000BB0, "Member 'AB_HidingProp_C::Sphere' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, HideLocation_ForwardVector) == 0x000BB8, "Member 'AB_HidingProp_C::HideLocation_ForwardVector' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, FadeToBlackTimeLine_NewTrack_0_6F7A5A024A1EA98FBD5F659709389C7D) == 0x000BC0, "Member 'AB_HidingProp_C::FadeToBlackTimeLine_NewTrack_0_6F7A5A024A1EA98FBD5F659709389C7D' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, FadeToBlackTimeLine__Direction_6F7A5A024A1EA98FBD5F659709389C7D) == 0x000BC4, "Member 'AB_HidingProp_C::FadeToBlackTimeLine__Direction_6F7A5A024A1EA98FBD5F659709389C7D' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, FadeToBlackTimeLine) == 0x000BC8, "Member 'AB_HidingProp_C::FadeToBlackTimeLine' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Enabled) == 0x000BD0, "Member 'AB_HidingProp_C::Enabled' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, HidingEnabled) == 0x000BF0, "Member 'AB_HidingProp_C::HidingEnabled' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, PlayerLimit) == 0x000C10, "Member 'AB_HidingProp_C::PlayerLimit' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, TeleportEnabled) == 0x000C30, "Member 'AB_HidingProp_C::TeleportEnabled' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, CanTeleport) == 0x000C50, "Member 'AB_HidingProp_C::CanTeleport' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, HidingPlayers) == 0x000C70, "Member 'AB_HidingProp_C::HidingPlayers' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, EnterGameplayCue) == 0x000C80, "Member 'AB_HidingProp_C::EnterGameplayCue' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ExitGameplayCue) == 0x000C88, "Member 'AB_HidingProp_C::ExitGameplayCue' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, LandedOnGameplayCue) == 0x000C90, "Member 'AB_HidingProp_C::LandedOnGameplayCue' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Mid) == 0x000C98, "Member 'AB_HidingProp_C::Mid' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, RustleGameplayCue) == 0x000CA0, "Member 'AB_HidingProp_C::RustleGameplayCue' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ExitGameplayCue_Player) == 0x000CA8, "Member 'AB_HidingProp_C::ExitGameplayCue_Player' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, WhileEnteringGameplayCue) == 0x000CB0, "Member 'AB_HidingProp_C::WhileEnteringGameplayCue' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ObstructionTraceLength) == 0x000CB8, "Member 'AB_HidingProp_C::ObstructionTraceLength' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, DestroyObjectTypes) == 0x000CC0, "Member 'AB_HidingProp_C::DestroyObjectTypes' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Array) == 0x000CD0, "Member 'AB_HidingProp_C::Array' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Int) == 0x000CE0, "Member 'AB_HidingProp_C::Int' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, DeimosPropSpawnerOffset) == 0x000CE4, "Member 'AB_HidingProp_C::DeimosPropSpawnerOffset' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, FixedEntranceDirection) == 0x000CF0, "Member 'AB_HidingProp_C::FixedEntranceDirection' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, MaxInteractAngle) == 0x000CF4, "Member 'AB_HidingProp_C::MaxInteractAngle' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, WobbleLocationOffset) == 0x000CF8, "Member 'AB_HidingProp_C::WobbleLocationOffset' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, InteractBelowPropDistance) == 0x000D04, "Member 'AB_HidingProp_C::InteractBelowPropDistance' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, HiddenPlayersAndEnterTimes) == 0x000D08, "Member 'AB_HidingProp_C::HiddenPlayersAndEnterTimes' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, LastPawnToInteract) == 0x000D58, "Member 'AB_HidingProp_C::LastPawnToInteract' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, TargetTeleporter) == 0x000D60, "Member 'AB_HidingProp_C::TargetTeleporter' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, TeleporterEnterGameplayCue) == 0x000D68, "Member 'AB_HidingProp_C::TeleporterEnterGameplayCue' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, TeleporterExitGameplayCue) == 0x000D70, "Member 'AB_HidingProp_C::TeleporterExitGameplayCue' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, LoopingTeleportingCue) == 0x000D78, "Member 'AB_HidingProp_C::LoopingTeleportingCue' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, GC_Wobble) == 0x000D80, "Member 'AB_HidingProp_C::GC_Wobble' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, WobbleTimerHandle) == 0x000D88, "Member 'AB_HidingProp_C::WobbleTimerHandle' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, BlockEntranceTags) == 0x000D90, "Member 'AB_HidingProp_C::BlockEntranceTags' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, BlockExitTags) == 0x000DA0, "Member 'AB_HidingProp_C::BlockExitTags' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, EnterAnimMontage) == 0x000DB0, "Member 'AB_HidingProp_C::EnterAnimMontage' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ExitAnimMontage) == 0x000DB8, "Member 'AB_HidingProp_C::ExitAnimMontage' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, LastPawnToHide) == 0x000DC0, "Member 'AB_HidingProp_C::LastPawnToHide' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, TeleportingStateGC) == 0x000DC8, "Member 'AB_HidingProp_C::TeleportingStateGC' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, RandomWobbleNormal) == 0x000DD0, "Member 'AB_HidingProp_C::RandomWobbleNormal' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, SingleOccupant) == 0x000DD1, "Member 'AB_HidingProp_C::SingleOccupant' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Teleporting) == 0x000DD2, "Member 'AB_HidingProp_C::Teleporting' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, JumpOut) == 0x000DD3, "Member 'AB_HidingProp_C::JumpOut' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, DestroyInNonSpyLTM) == 0x000DD4, "Member 'AB_HidingProp_C::DestroyInNonSpyLTM' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ActiveInSpyLTM) == 0x000DD5, "Member 'AB_HidingProp_C::ActiveInSpyLTM' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ForceAllowInteractTags) == 0x000DD8, "Member 'AB_HidingProp_C::ForceAllowInteractTags' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, IsTeleporter) == 0x000DE8, "Member 'AB_HidingProp_C::IsTeleporter' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ContainsPlayerRepNof) == 0x000DF0, "Member 'AB_HidingProp_C::ContainsPlayerRepNof' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ObstructionTraceExtents) == 0x000DF8, "Member 'AB_HidingProp_C::ObstructionTraceExtents' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ObstructionTraceStartOffSet) == 0x000E04, "Member 'AB_HidingProp_C::ObstructionTraceStartOffSet' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ExitLaunchVelocity) == 0x000E10, "Member 'AB_HidingProp_C::ExitLaunchVelocity' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, AdditionalZLaunch) == 0x000E14, "Member 'AB_HidingProp_C::AdditionalZLaunch' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, FixedEntraceObstructionTraceEndOffset) == 0x000E20, "Member 'AB_HidingProp_C::FixedEntraceObstructionTraceEndOffset' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, NonCosmeticPawns) == 0x000E30, "Member 'AB_HidingProp_C::NonCosmeticPawns' has a wrong offset!");

}

