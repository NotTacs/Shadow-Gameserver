#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Countdown_Frontend_S12

#include "Basic.hpp"

#include "BP_CountdownMaster_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Countdown_Frontend_S12.BP_Countdown_Frontend_S12_C
// 0x0028 (0x0328 - 0x0300)
class ABP_Countdown_Frontend_S12_C final : public ABP_CountdownMaster_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Countdown_Frontend_S12_C;        // 0x0300(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SM_Monitor;                                        // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FString                                 CountdownEvent;                                    // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsVisible;                                         // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Countdown_Frontend_S12(int32 EntryPoint);
	void ReceiveBeginPlay();
	void OnEventActive_BBB45BE54610FD5633843CA672545D58(const class FString& EventName, const struct FTimespan& TimeUntilEnd, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void OnEventUpdated_BBB45BE54610FD5633843CA672545D58(const class FString& EventName, const struct FTimespan& TimeUntilEnd, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void OnEventEnded_BBB45BE54610FD5633843CA672545D58(const class FString& EventName, const struct FTimespan& TimeUntilEnd, const struct FTimespan& TimeSinceBegin, float TimespanRatio);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Countdown_Frontend_S12_C">();
	}
	static class ABP_Countdown_Frontend_S12_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Countdown_Frontend_S12_C>();
	}
};
static_assert(alignof(ABP_Countdown_Frontend_S12_C) == 0x000008, "Wrong alignment on ABP_Countdown_Frontend_S12_C");
static_assert(sizeof(ABP_Countdown_Frontend_S12_C) == 0x000328, "Wrong size on ABP_Countdown_Frontend_S12_C");
static_assert(offsetof(ABP_Countdown_Frontend_S12_C, UberGraphFrame_BP_Countdown_Frontend_S12_C) == 0x000300, "Member 'ABP_Countdown_Frontend_S12_C::UberGraphFrame_BP_Countdown_Frontend_S12_C' has a wrong offset!");
static_assert(offsetof(ABP_Countdown_Frontend_S12_C, SM_Monitor) == 0x000308, "Member 'ABP_Countdown_Frontend_S12_C::SM_Monitor' has a wrong offset!");
static_assert(offsetof(ABP_Countdown_Frontend_S12_C, CountdownEvent) == 0x000310, "Member 'ABP_Countdown_Frontend_S12_C::CountdownEvent' has a wrong offset!");
static_assert(offsetof(ABP_Countdown_Frontend_S12_C, IsVisible) == 0x000320, "Member 'ABP_Countdown_Frontend_S12_C::IsVisible' has a wrong offset!");

}

