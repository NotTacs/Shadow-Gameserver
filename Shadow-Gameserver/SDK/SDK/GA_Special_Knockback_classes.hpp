#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Special_Knockback

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Special_Knockback.GA_Special_Knockback_C
// 0x0110 (0x0B40 - 0x0A30)
class UGA_Special_Knockback_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0A30(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0A38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxLaunchHeight;                                   // 0x0A40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchPower;                                       // 0x0A44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ZOffset;                                           // 0x0A48(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SafeZoneCenter;                                    // 0x0A54(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 EventName;                                         // 0x0A60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGameplayTag                           SafeZoneTag;                                       // 0x0A70(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           StructureDestructionTimer;                         // 0x0A78(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         ActorRadius;                                       // 0x0A80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           WaterImpactGC;                                     // 0x0A84(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SwimmingActive;                                    // 0x0A8C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A94[0x4];                                      // 0x0A94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ConstantPushTimer;                                 // 0x0A98(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         IncrementalPower;                                  // 0x0AA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultLaunchPower;                                // 0x0AA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchPowerInAir;                                  // 0x0AA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AAC[0x4];                                      // 0x0AAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 SwimAnimInstance;                                  // 0x0AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaterMaxHeight;                                    // 0x0AB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AboveWaterHeight;                                  // 0x0ABC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ABD[0x3];                                      // 0x0ABD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           HeightChecker;                                     // 0x0AC0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchPowerClamp;                                  // 0x0AC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AI_Tag;                                            // 0x0ACC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Instorm;                                           // 0x0AD4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD5[0x3];                                      // 0x0AD5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PushTime;                                          // 0x0AD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PushTimeMultiplier;                                // 0x0ADC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           UnderwaterTag;                                     // 0x0AE0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 GameplayActiveCalendarEvent;                       // 0x0AE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          WaterActive;                                       // 0x0AF8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AF9[0x3];                                      // 0x0AF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           WaterExitGC;                                       // 0x0AFC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSequence;                                        // 0x0B04(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B05[0x3];                                      // 0x0B05(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Can_Trigger_Knock;                                 // 0x0B08(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         FloatZone;                                         // 0x0B10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           StormGCTag;                                        // 0x0B14(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         MaxPowerClamp;                                     // 0x0B1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZForce;                                            // 0x0B20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         XYForce;                                           // 0x0B24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchClamp;                                       // 0x0B28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreFallDamage;                                  // 0x0B2C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanActivateEver;                                   // 0x0B2D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B2E[0x2];                                      // 0x0B2E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           FritterTag;                                        // 0x0B30(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInFritter;                                       // 0x0B38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldDestroyOnHit;                                // 0x0B39(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B3A[0x2];                                      // 0x0B3A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetMultiplierForDeltaTime;                      // 0x0B3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GA_Special_Knockback(int32 EntryPoint);
	void ResetAboveWaterCall();
	void DestroyWhatIHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void K2_ActivateAbility();
	void InWater();
	void CheckHeight();
	void ConstantPush();
	void OnFinish_A91F2F0B40E322CCD07212B0ADA8CCB0();
	void Removed_55D484A2481D6216E67737978D39B7BB();
	void Added_93B708CF46D1927FC9D4BA82EAE52D19();
	void OnReady_5BF758434AA06130F0C122BF8CB8A0D0(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void Added_AFDBC0BD4FCBD88B771C2CA3D6243E52();
	void Removed_125FBECB482A379477D5758919416F9F();
	void Added_AD5740264D75008832E5AC8163D844EE();
	void CheckPlayerHeight();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Special_Knockback_C">();
	}
	static class UGA_Special_Knockback_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Special_Knockback_C>();
	}
};
static_assert(alignof(UGA_Special_Knockback_C) == 0x000008, "Wrong alignment on UGA_Special_Knockback_C");
static_assert(sizeof(UGA_Special_Knockback_C) == 0x000B40, "Wrong size on UGA_Special_Knockback_C");
static_assert(offsetof(UGA_Special_Knockback_C, UberGraphFrame) == 0x000A30, "Member 'UGA_Special_Knockback_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, PlayerPawn) == 0x000A38, "Member 'UGA_Special_Knockback_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, MaxLaunchHeight) == 0x000A40, "Member 'UGA_Special_Knockback_C::MaxLaunchHeight' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, LaunchPower) == 0x000A44, "Member 'UGA_Special_Knockback_C::LaunchPower' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, ZOffset) == 0x000A48, "Member 'UGA_Special_Knockback_C::ZOffset' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, SafeZoneCenter) == 0x000A54, "Member 'UGA_Special_Knockback_C::SafeZoneCenter' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, EventName) == 0x000A60, "Member 'UGA_Special_Knockback_C::EventName' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, SafeZoneTag) == 0x000A70, "Member 'UGA_Special_Knockback_C::SafeZoneTag' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, StructureDestructionTimer) == 0x000A78, "Member 'UGA_Special_Knockback_C::StructureDestructionTimer' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, ActorRadius) == 0x000A80, "Member 'UGA_Special_Knockback_C::ActorRadius' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, WaterImpactGC) == 0x000A84, "Member 'UGA_Special_Knockback_C::WaterImpactGC' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, SwimmingActive) == 0x000A8C, "Member 'UGA_Special_Knockback_C::SwimmingActive' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, ConstantPushTimer) == 0x000A98, "Member 'UGA_Special_Knockback_C::ConstantPushTimer' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, IncrementalPower) == 0x000AA0, "Member 'UGA_Special_Knockback_C::IncrementalPower' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, DefaultLaunchPower) == 0x000AA4, "Member 'UGA_Special_Knockback_C::DefaultLaunchPower' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, LaunchPowerInAir) == 0x000AA8, "Member 'UGA_Special_Knockback_C::LaunchPowerInAir' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, SwimAnimInstance) == 0x000AB0, "Member 'UGA_Special_Knockback_C::SwimAnimInstance' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, WaterMaxHeight) == 0x000AB8, "Member 'UGA_Special_Knockback_C::WaterMaxHeight' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, AboveWaterHeight) == 0x000ABC, "Member 'UGA_Special_Knockback_C::AboveWaterHeight' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, HeightChecker) == 0x000AC0, "Member 'UGA_Special_Knockback_C::HeightChecker' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, LaunchPowerClamp) == 0x000AC8, "Member 'UGA_Special_Knockback_C::LaunchPowerClamp' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, AI_Tag) == 0x000ACC, "Member 'UGA_Special_Knockback_C::AI_Tag' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, Instorm) == 0x000AD4, "Member 'UGA_Special_Knockback_C::Instorm' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, PushTime) == 0x000AD8, "Member 'UGA_Special_Knockback_C::PushTime' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, PushTimeMultiplier) == 0x000ADC, "Member 'UGA_Special_Knockback_C::PushTimeMultiplier' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, UnderwaterTag) == 0x000AE0, "Member 'UGA_Special_Knockback_C::UnderwaterTag' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, GameplayActiveCalendarEvent) == 0x000AE8, "Member 'UGA_Special_Knockback_C::GameplayActiveCalendarEvent' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, WaterActive) == 0x000AF8, "Member 'UGA_Special_Knockback_C::WaterActive' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, WaterExitGC) == 0x000AFC, "Member 'UGA_Special_Knockback_C::WaterExitGC' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, IsSequence) == 0x000B04, "Member 'UGA_Special_Knockback_C::IsSequence' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, Can_Trigger_Knock) == 0x000B08, "Member 'UGA_Special_Knockback_C::Can_Trigger_Knock' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, FloatZone) == 0x000B10, "Member 'UGA_Special_Knockback_C::FloatZone' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, StormGCTag) == 0x000B14, "Member 'UGA_Special_Knockback_C::StormGCTag' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, MaxPowerClamp) == 0x000B1C, "Member 'UGA_Special_Knockback_C::MaxPowerClamp' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, ZForce) == 0x000B20, "Member 'UGA_Special_Knockback_C::ZForce' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, XYForce) == 0x000B24, "Member 'UGA_Special_Knockback_C::XYForce' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, LaunchClamp) == 0x000B28, "Member 'UGA_Special_Knockback_C::LaunchClamp' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, IgnoreFallDamage) == 0x000B2C, "Member 'UGA_Special_Knockback_C::IgnoreFallDamage' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, CanActivateEver) == 0x000B2D, "Member 'UGA_Special_Knockback_C::CanActivateEver' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, FritterTag) == 0x000B30, "Member 'UGA_Special_Knockback_C::FritterTag' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, IsInFritter) == 0x000B38, "Member 'UGA_Special_Knockback_C::IsInFritter' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, ShouldDestroyOnHit) == 0x000B39, "Member 'UGA_Special_Knockback_C::ShouldDestroyOnHit' has a wrong offset!");
static_assert(offsetof(UGA_Special_Knockback_C, OffsetMultiplierForDeltaTime) == 0x000B3C, "Member 'UGA_Special_Knockback_C::OffsetMultiplierForDeltaTime' has a wrong offset!");

}

